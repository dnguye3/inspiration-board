{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","emoji","id","text","deleteCardCallback","postItNoteColors","className","Math","floor","random","length","emojis","getUnicode","onClick","EMOJI_LIST","NewCardForm","addCardCallback","useState","cardFields","setCardFields","onInputChange","event","newCardFields","target","name","value","onSubmit","preventDefault","class","htmlFor","type","placeholder","onChange","selected","disabled","hidden","map","key","Board","url","cardList","setCardList","setErrorMessage","loadCards","axios","get","then","response","cardCollection","data","item","card","deleteCard","catch","error","errorMessage","message","console","log","useEffect","delete","cardObject","post","App","boardName","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7de50390.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Card.css\";\nimport emojis from \"emoji-dictionary\";\n\nconst Card = ({ emoji, id, text, deleteCardCallback }) => {\n  // source to randomize a set of colors: https://stackoverflow.com/questions/27799125/random-color-on-different-divs/27799274\n  let postItNoteColors = [\"card__color-yellow\", \"card__color-red\", \"card__color-green\", \"card__color-blue\", \"card__color-pink\"]\n\n  return (\n    <div className={\"card card__content \" + postItNoteColors[Math.floor(Math.random() * postItNoteColors.length)]}>\n      <p className=\"card__content-text\">{text}</p>\n      <span className=\"card__content-emoji\">\n        {emojis.getUnicode(`${emoji}`)}\n      </span>\n      <button\n        onClick={() => {\n          deleteCardCallback(id)\n        }}\n        className=\"card__delete card__delete:hover\"\n      >\n        ✨ Take this card ✨\n      </button>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  id: PropTypes.number,\n  text: PropTypes.string,\n  emoji: PropTypes.string,\n  deleteCardCallback: PropTypes.func,\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./NewCardForm.css\";\nimport emojis from 'emoji-dictionary';\n\n\nconst EMOJI_LIST = [\"\", \"heart_eyes\", \"beer\", \"clap\", \"sparkling_heart\", \"dog\", \"heart_eyes_cat\"]\n\nconst NewCardForm = ({addCardCallback}) => {\n  const [cardFields, setCardFields] = useState({\n    text: \"\",\n    emoji: \"\",\n  });\n\n  const onInputChange = (event) => {\n    const newCardFields = {\n      ...cardFields,\n    };\n    newCardFields[event.target.name] = event.target.value;\n    setCardFields(newCardFields);\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n\n    addCardCallback(cardFields);\n\n    setCardFields({\n      text: \"\",\n      emoji: \"\",\n    });\n  };\n\n  return (\n    <header className=\"new-card-form__header\"> \n    <p className=\"new-card-form__form-button\"> Submit your own card~ </p>\n    <form onSubmit={onFormSubmit} className=\"new-card-form new-card-form__form\">\n      {/* text input */}\n    <div class=\"group\">\n      <label htmlFor=\"text\"></label>\n      <input\n        type=\"text\"\n        placeholder=\"your message\"\n        onChange={onInputChange}\n        name=\"text\"\n        value={cardFields.text}\n        className=\" new-card-form__form-textarea\"\n      />\n      <span class=\"highlight\"></span>\n      <span class=\"bar\"></span>\n    </div>\n      {/* emoji */}\n      <label htmlFor=\"emoji\"></label>\n      <select \n        name=\"emoji\"\n        placeholder=\"emoji\"\n        onChange={onInputChange}\n        value={cardFields.emoji}\n        className=\"new-card-form__form-select\"\n      >   \n      <option value=\"\" selected disabled hidden>Choose an emoji</option>\n        {EMOJI_LIST.map(emoji =>\n        <option key={emoji} value={emoji}>{emojis.getUnicode(`${emoji}`)}</option>\n      )};\n      </select>\n      {/* submit */}\n      <input\n        type=\"submit\"\n        value=\"Add Card\"\n        className=\"new-card-form__form-button\"\n      />\n    </form>\n    </header>\n  );\n};\n\nNewCardForm.propTypes = {\n  addCardCallback: PropTypes.func\n};\n\nexport default NewCardForm;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n\nimport \"./Board.css\";\nimport Card from \"./Card\";\nimport NewCardForm from \"./NewCardForm\";\n\nconst Board = ({ url }) => {\n  const [cardList, setCardList] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const loadCards = () => {\n    axios\n      .get(url)\n      .then((response) => {\n        const apiCardList = response.data;\n        let cardCollection = apiCardList.map((item) => {\n          return (\n            <Card\n              key={item.card.id}\n              id={item.card.id}\n              text={item.card.text}\n              emoji={item.card.emoji}\n              deleteCardCallback={deleteCard}\n            />\n          );\n        });\n        setCardList(cardCollection);\n      })\n      .catch((error) => {\n        const errorMessage = error.message;\n        setErrorMessage(errorMessage);\n        console.log(errorMessage);\n      });\n  };\n\n  useEffect(() => {loadCards();}, []);\n\n  const deleteCard = (id) => {\n    axios.delete(`https://inspiration-board.herokuapp.com/cards/${id}`)\n      .then((response) => {\n        loadCards();\n      })\n      .catch((error) => {\n        setErrorMessage(`Unable to delete card ${id}`);\n      });\n    // }\n  };\n\n  const postCard = (cardObject) => {\n    axios\n      .post(\n        `https://inspiration-board.herokuapp.com/boards/Hala&Diana/cards`,\n        cardObject)\n      .then((response) => {\n        loadCards();\n      })\n      .catch((error) => {\n        setErrorMessage(`Unable to post card`);\n      });\n  };\n\n  return (\n      <div><NewCardForm addCardCallback={postCard} />\n      <div className=\"board\">\n        {cardList}  \n      </div>\n      </div>\n\n  );\n};\n\nBoard.propTypes = {\n  url: PropTypes.string\n};\n\nexport default Board;\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board\";\n\n\nconst App = () => {\n  return (\n    <section>\n      <header className=\"header\">\n        <h1 className=\"header__h1\">\n          <span className=\"header__text\">Inspiration Board</span>\n        </h1>\n      </header>\n      <Board\n        url=\"https://inspiration-board.herokuapp.com/boards/Hala&Diana/cards\"\n        boardName={`Hala&Diana`}\n      />\n    </section>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}